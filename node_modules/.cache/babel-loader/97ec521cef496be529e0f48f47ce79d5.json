{"ast":null,"code":"var _jsxFileName = \"/Users/andrei/www/own_projects/fest/src/components/passwordReset.js\";\nimport React, { Component } from 'react'; // import { Formik } from 'formik'\n// import { object, ref, string } from 'yup'\n\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid'; //\n// import Spinner from './Spinner'\n// import Alert from './Alert'\n\nfunction Spinner() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      height: '100vh'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgress, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default class PasswordReset extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      passChangeSuccess: false\n    };\n\n    this._handleModalClose = () => {\n      this.setState(() => ({\n        passChangeSuccess: false\n      }));\n    };\n\n    this._renderModal = () => {\n      const onClick = () => {\n        this.setState(() => ({\n          passChangeSuccess: false\n        }));\n      }; // return (\n      //     <Alert\n      //         isOpen={this.state.passChangeSuccess}\n      //         onClose={this._handleClose}\n      //         handleSubmit={onClick}\n      //         title=\"Password Reset\"\n      //         text=\"Your password was changed successfully\"\n      //         submitButtonText=\"Done\"\n      //     />\n      // )\n\n    };\n\n    this._handleSubmit = ({\n      currentPass,\n      newPass,\n      confirmPass,\n      setSubmitting,\n      resetForm\n    }) => {\n      // fake async login\n      setTimeout(async () => {\n        setSubmitting(false);\n        this.setState(() => ({\n          passChangeSuccess: true\n        }));\n        resetForm();\n      }, 1000);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Grid, {\n      initialValues: {\n        currentPass: '',\n        newPass: '',\n        confirmPass: ''\n      },\n      onSubmit: ({\n        currentPass,\n        newPass,\n        confirmPass\n      }, {\n        setSubmitting,\n        resetForm\n      }) => this._handleSubmit({\n        currentPass,\n        newPass,\n        confirmPass,\n        setSubmitting,\n        resetForm\n      }),\n      render: props => {\n        const {\n          values,\n          touched,\n          errors,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          isValid,\n          isSubmitting\n        } = props;\n        return isSubmitting ? Spinner() : /*#__PURE__*/React.createElement(Paper, {\n          className: \"form form--wrapper\",\n          elevation: 10,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"form\", {\n          className: \"form\",\n          onSubmit: handleSubmit,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(FormControl, {\n          fullWidth: true,\n          margin: \"dense\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 33\n          }\n        }, /*#__PURE__*/React.createElement(InputLabel, {\n          htmlFor: \"password-current\",\n          error: Boolean(touched.currentPass && errors.currentPass),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 37\n          }\n        }, 'Current Password'), /*#__PURE__*/React.createElement(Input, {\n          id: \"password-current\",\n          name: \"currentPass\",\n          type: \"password\",\n          value: values.currentPass,\n          onChange: handleChange,\n          onBlur: handleBlur,\n          error: Boolean(touched.currentPass && errors.currentPass),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 37\n          }\n        }), /*#__PURE__*/React.createElement(FormHelperText, {\n          error: Boolean(touched.currentPass && errors.currentPass),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 37\n          }\n        }, touched.currentPass && errors.currentPass ? errors.currentPass : '')), /*#__PURE__*/React.createElement(FormControl, {\n          fullWidth: true,\n          margin: \"dense\",\n          error: Boolean(touched.newPass && errors.newPass),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 33\n          }\n        }, /*#__PURE__*/React.createElement(InputLabel, {\n          htmlFor: \"password-new\",\n          error: Boolean(touched.newPass && errors.newPass),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 37\n          }\n        }, 'New Password'), /*#__PURE__*/React.createElement(Input, {\n          id: \"password-new\",\n          name: \"newPass\",\n          type: \"password\",\n          value: values.newPass,\n          onChange: handleChange,\n          onBlur: handleBlur,\n          error: Boolean(touched.newPass && errors.newPass),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 37\n          }\n        }), /*#__PURE__*/React.createElement(FormHelperText, {\n          error: Boolean(touched.newPass && errors.newPass),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 37\n          }\n        }, touched.newPass && errors.newPass ? errors.newPass : '')), /*#__PURE__*/React.createElement(FormControl, {\n          fullWidth: true,\n          margin: \"dense\",\n          error: Boolean(touched.confirmPass && errors.confirmPass),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 33\n          }\n        }, /*#__PURE__*/React.createElement(InputLabel, {\n          htmlFor: \"password-confirm\",\n          error: Boolean(touched.confirmPass && errors.confirmPass),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 37\n          }\n        }, 'Confirm Password'), /*#__PURE__*/React.createElement(Input, {\n          id: \"password-confirm\",\n          name: \"confirmPass\",\n          type: \"password\",\n          value: values.confirmPass,\n          onChange: handleChange,\n          onBlur: handleBlur,\n          error: Boolean(touched.confirmPass && errors.confirmPass),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 37\n          }\n        }), /*#__PURE__*/React.createElement(FormHelperText, {\n          error: Boolean(touched.confirmPass && errors.confirmPass),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 37\n          }\n        }, touched.confirmPass && errors.confirmPass ? errors.confirmPass : '')), /*#__PURE__*/React.createElement(Button, {\n          type: \"submit\",\n          variant: \"raised\",\n          color: \"primary\",\n          disabled: Boolean(!isValid || isSubmitting),\n          style: {\n            margin: '16px'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 33\n          }\n        }, 'Reset Password')), this._renderModal());\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/andrei/www/own_projects/fest/src/components/passwordReset.js"],"names":["React","Component","Input","InputLabel","FormControl","FormHelperText","Button","Paper","Grid","Spinner","display","flexDirection","justifyContent","alignItems","height","PasswordReset","state","passChangeSuccess","_handleModalClose","setState","_renderModal","onClick","_handleSubmit","currentPass","newPass","confirmPass","setSubmitting","resetForm","setTimeout","render","props","values","touched","errors","handleChange","handleBlur","handleSubmit","isValid","isSubmitting","Boolean","margin"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react'\n// import { Formik } from 'formik'\n// import { object, ref, string } from 'yup'\nimport Input from '@material-ui/core/Input'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormHelperText from '@material-ui/core/FormHelperText'\nimport Button from '@material-ui/core/Button'\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid'\n//\n// import Spinner from './Spinner'\n// import Alert from './Alert'\n\nfunction Spinner() {\n    return (\n        <div\n            style={{\n                display: 'flex',\n                flexDirection: 'column',\n                justifyContent: 'center',\n                alignItems: 'center',\n                height: '100vh',\n            }}\n        >\n            <CircularProgress color=\"primary\" />\n        </div>\n    )\n}\n\nexport default class PasswordReset extends Component {\n    state = {\n        passChangeSuccess: false,\n    }\n\n    _handleModalClose = () => {\n        this.setState(() => ({\n            passChangeSuccess: false,\n        }))\n    }\n\n    _renderModal = () => {\n        const onClick = () => {\n            this.setState(() => ({ passChangeSuccess: false }))\n        }\n\n        // return (\n        //     <Alert\n        //         isOpen={this.state.passChangeSuccess}\n        //         onClose={this._handleClose}\n        //         handleSubmit={onClick}\n        //         title=\"Password Reset\"\n        //         text=\"Your password was changed successfully\"\n        //         submitButtonText=\"Done\"\n        //     />\n        // )\n    }\n\n    _handleSubmit = ({\n                         currentPass,\n                         newPass,\n                         confirmPass,\n                         setSubmitting,\n                         resetForm,\n                     }) => {\n        // fake async login\n        setTimeout(async () => {\n            setSubmitting(false)\n\n            this.setState(() => ({\n                passChangeSuccess: true,\n            }))\n\n            resetForm()\n        }, 1000)\n    }\n\n    render() {\n        return (\n            <Grid\n                initialValues={{\n                    currentPass: '',\n                    newPass: '',\n                    confirmPass: '',\n                }}\n\n                onSubmit={(\n                    { currentPass, newPass, confirmPass },\n                    { setSubmitting, resetForm }\n                ) =>\n                    this._handleSubmit({\n                        currentPass,\n                        newPass,\n                        confirmPass,\n                        setSubmitting,\n                        resetForm,\n                    })\n                }\n                render={props => {\n                    const {\n                        values,\n                        touched,\n                        errors,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit,\n                        isValid,\n                        isSubmitting,\n                    } = props\n                    return isSubmitting ? (\n                        Spinner()\n                    ) : (\n                        <Paper className=\"form form--wrapper\" elevation={10}>\n                            <form className=\"form\" onSubmit={handleSubmit}>\n                                <FormControl fullWidth margin=\"dense\">\n                                    <InputLabel\n                                        htmlFor=\"password-current\"\n                                        error={Boolean(touched.currentPass && errors.currentPass)}\n                                    >\n                                        {'Current Password'}\n                                    </InputLabel>\n                                    <Input\n                                        id=\"password-current\"\n                                        name=\"currentPass\"\n                                        type=\"password\"\n                                        value={values.currentPass}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        error={Boolean(touched.currentPass && errors.currentPass)}\n                                    />\n                                    <FormHelperText\n                                        error={Boolean(touched.currentPass && errors.currentPass)}\n                                    >\n                                        {touched.currentPass && errors.currentPass\n                                            ? errors.currentPass\n                                            : ''}\n                                    </FormHelperText>\n                                </FormControl>\n                                <FormControl\n                                    fullWidth\n                                    margin=\"dense\"\n                                    error={Boolean(touched.newPass && errors.newPass)}\n                                >\n                                    <InputLabel\n                                        htmlFor=\"password-new\"\n                                        error={Boolean(touched.newPass && errors.newPass)}\n                                    >\n                                        {'New Password'}\n                                    </InputLabel>\n                                    <Input\n                                        id=\"password-new\"\n                                        name=\"newPass\"\n                                        type=\"password\"\n                                        value={values.newPass}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        error={Boolean(touched.newPass && errors.newPass)}\n                                    />\n                                    <FormHelperText\n                                        error={Boolean(touched.newPass && errors.newPass)}\n                                    >\n                                        {touched.newPass && errors.newPass ? errors.newPass : ''}\n                                    </FormHelperText>\n                                </FormControl>\n                                <FormControl\n                                    fullWidth\n                                    margin=\"dense\"\n                                    error={Boolean(touched.confirmPass && errors.confirmPass)}\n                                >\n                                    <InputLabel\n                                        htmlFor=\"password-confirm\"\n                                        error={Boolean(touched.confirmPass && errors.confirmPass)}\n                                    >\n                                        {'Confirm Password'}\n                                    </InputLabel>\n                                    <Input\n                                        id=\"password-confirm\"\n                                        name=\"confirmPass\"\n                                        type=\"password\"\n                                        value={values.confirmPass}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        error={Boolean(touched.confirmPass && errors.confirmPass)}\n                                    />\n                                    <FormHelperText\n                                        error={Boolean(touched.confirmPass && errors.confirmPass)}\n                                    >\n                                        {touched.confirmPass && errors.confirmPass\n                                            ? errors.confirmPass\n                                            : ''}\n                                    </FormHelperText>\n                                </FormControl>\n                                <Button\n                                    type=\"submit\"\n                                    variant=\"raised\"\n                                    color=\"primary\"\n                                    disabled={Boolean(!isValid || isSubmitting)}\n                                    style={{ margin: '16px' }}\n                                >\n                                    {'Reset Password'}\n                                </Button>\n                            </form>\n                            {this._renderModal()}\n                        </Paper>\n                    )\n                }}\n            />\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}